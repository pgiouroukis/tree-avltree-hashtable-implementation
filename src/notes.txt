bool BTree::deleteWord(string w) {

    Node *ptr = root;
    Node *prevPtr = nullptr;
    bool found = false;
    while (!found && ptr!=nullptr) {
        if ( w.compare(ptr->word) == 0 ) {
            //Vrika ton komvo pros diagrafi!
            found = true;
            if (ptr->leftNode == nullptr && ptr->rightNode == nullptr) {
                if (prevPtr->leftNode == ptr) {
                    prevPtr->leftNode = nullptr;
                } else {
                    prevPtr->rightNode = nullptr;
                }
                delete ptr;
                return true;
            } else if (ptr->leftNode == nullptr || ptr->rightNode == nullptr) {
                //exei mono ena paidi, vrisko prota to paidi
                Node *childPtr;
                if (ptr->leftNode != nullptr) {
                    childPtr = ptr->leftNode;
                } else {
                    childPtr = ptr->rightNode;
                }

                if (prevPtr->leftNode == ptr) {
                    prevPtr->leftNode = childPtr;
                } else {
                    prevPtr->rightNode = childPtr;
                }
                delete ptr;
                return true;
            } else {
                //exei 2 children

                //vrisko to pio mikro stoixeio apo to deksi ypodentro
                Node *Tptr = ptr->rightNode;
                Node *prevTptr = ptr;
                while (Tptr->leftNode != nullptr) {
                    prevTptr = Tptr;
                    Tptr = Tptr->leftNode;
                }

                //yparxei periptosi na exei deksi paidi to stoixeio auto, ara thelei eidiki metaxeirisi
                if (Tptr->rightNode != nullptr) {
                    prevTptr->leftNode = Tptr->rightNode;
                }

                //allazo to parent to ptr me to Tptr
                if (prevPtr->leftNode == ptr) {
                    prevPtr->leftNode = Tptr;
                } else {
                    prevPtr->rightNode = Tptr;
                }
                //vazo sta paidia toy Tptr ta paidia to ptr, kai meta svino to ptr
                Tptr->leftNode = ptr->leftNode;
                Tptr->rightNode = ptr->rightNode;
                delete ptr;
                return true;
            }

        } else if (w.compare(ptr->word) < 0) {
            prevPtr = ptr;
            ptr = ptr->leftNode;
        } else if (w.compare(ptr->word) > 0) {
            prevPtr = ptr;
            ptr = ptr->rightNode;
        }
    }
    return false;
}
